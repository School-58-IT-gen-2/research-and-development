from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import logging
import httpx
import uuid

API_BASE_URL = "http://localhost:8000"  # –ø–æ–º–µ–Ω—è–π –Ω–∞ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ API –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


API_TOKEN = '8154427178:AAEJPcc0xXiRt43YgCNs_hKKqVmibGoyAAA'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CharacterCreation(StatesGroup):
    CHOOSING_CLASS = State()
    CHOOSING_RACE = State()
    CHOOSING_CHARACTERISTICS = State()
    SETTING_CHARACTERISTIC = State()
    CHOOSING_SKILLS = State()
    CHOOSING_INVENTORY = State()
    CHOOSING_GENDER = State()
    CHOOSING_AGE = State()
    CHOOSING_STORY = State()
    CHOOSING_NAME = State()

# –í–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞—Å—Å–æ–≤ –∏ —Ä–∞—Å
CLASSES = ["–°–ª–µ–¥–æ–ø—ã—Ç", "–í–∞—Ä–≤–∞—Ä", "–ë–∞—Ä–¥", "–ü–ª—É—Ç", "–î—Ä—É–∏–¥", "–ö–æ–ª–¥—É–Ω", "–ú–æ–Ω–∞—Ö", "–ü–∞–ª–∞–¥–∏–Ω", "–ñ—Ä–µ—Ü", "–ú–∞–≥", "–í–æ–∏–Ω", "–í–æ–ª—à–µ–±–Ω–∏–∫"]
RACES = ["–ß–µ–ª–æ–≤–µ–∫", "–≠–ª—å—Ñ", "–ü–æ–ª—É–æ—Ä–∫", "–ì–Ω–æ–º", "–î–≤–∞—Ä—Ñ", "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π", "–ü–æ–ª—É—ç–ª—å—Ñ", "–¢–∏—Ñ–ª–∏–Ω–≥"]
GENDERS = ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]
CHARACTERISTICS_ORDER = ["–°–∏–ª–∞", "–õ–æ–≤–∫–æ—Å—Ç—å", "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ú—É–¥—Ä–æ—Å—Ç—å", "–•–∞—Ä–∏–∑–º–∞"]
CHARACTERISTIC_VALUES = ["8", "10", "12", "13", "14", "15"]


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —Å–ø–∏—Å–∫—É
def generate_keyboard(options: list[str], prefix: str) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=option, callback_data=f"{prefix}:{option}")]
        for option in options
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)



# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(CharacterCreation.CHOOSING_CLASS)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:",
        reply_markup=generate_keyboard(CLASSES, "class")
    )


# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.callback_query(F.data.startswith("class"))
async def handle_class_choice(callback: CallbackQuery, state: FSMContext):
    chosen_class = callback.data.split(":")[1]
    await state.update_data(ch_class=chosen_class)
    await callback.message.edit_text(
        f"–ö–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω: {chosen_class}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞—Å—É:",
        reply_markup=generate_keyboard(RACES, "race")
    )
    await state.set_state(CharacterCreation.CHOOSING_RACE)
    await callback.answer()


@dp.callback_query(F.data.startswith("race"))
async def handle_race_choice(callback: CallbackQuery, state: FSMContext):
    chosen_race = callback.data.split(":")[1]
    await state.update_data(race=chosen_race)
    await callback.message.edit_text(
        f"–†–∞—Å–∞ –≤—ã–±—Ä–∞–Ω–∞: {chosen_race}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=generate_keyboard(GENDERS, "gender")
    )
    await state.set_state(CharacterCreation.CHOOSING_GENDER)
    await callback.answer()

@dp.callback_query(F.data.startswith("gender"))
async def handle_gender_choice(callback: CallbackQuery, state: FSMContext):
    chosen_gender = callback.data.split(":")[1]
    await state.update_data(gender=chosen_gender)
    await callback.message.edit_text(
        f"–ü–æ–ª –≤—ã–±—Ä–∞–Ω: {chosen_gender}\n–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É?"
    )
    await state.set_state(CharacterCreation.CHOOSING_AGE)
    await callback.answer()


@dp.message(CharacterCreation.CHOOSING_CHARACTERISTICS)
async def choose_characteristics(message: Message, state: FSMContext):
    await state.update_data(characteristics=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫–∏:")
    await state.set_state(CharacterCreation.CHOOSING_SKILLS)

@dp.message(CharacterCreation.CHOOSING_SKILLS)
async def choose_skills(message: Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer("–ß—Ç–æ —É –Ω–µ–≥–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ?")
    await state.set_state(CharacterCreation.CHOOSING_INVENTORY)

@dp.message(CharacterCreation.CHOOSING_INVENTORY)
async def choose_inventory(message: Message, state: FSMContext):
    await state.update_data(inventory=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É?")
    await state.set_state(CharacterCreation.CHOOSING_AGE)

@dp.message(CharacterCreation.CHOOSING_AGE)
async def choose_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    await state.set_state(CharacterCreation.CHOOSING_STORY)

@dp.message(CharacterCreation.CHOOSING_STORY)
async def choose_story(message: Message, state: FSMContext):
    await state.update_data(story=message.text)
    await message.answer("–ò –Ω–∞–∫–æ–Ω–µ—Ü, –∫–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?")
    await state.set_state(CharacterCreation.CHOOSING_NAME)

@dp.message(CharacterCreation.CHOOSING_NAME)
async def choose_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    
    summary = (
        f"üé≤ –í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂:\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–ö–ª–∞—Å—Å: {data.get('ch_class')}\n"
        f"–†–∞—Å–∞: {data.get('race')}\n"
        f"–ü–æ–ª: {data.get('gender')}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {data.get('characteristics')}\n"
        f"–ù–∞–≤—ã–∫–∏: {data.get('skills')}\n"
        f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {data.get('inventory')}\n"
        f"–ò—Å—Ç–æ—Ä–∏—è: {data.get('story')}"
    )

    await message.answer(summary)
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
