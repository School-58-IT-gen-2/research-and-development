from aiogram import Bot, Dispatcher, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
import random
import asyncio
import logging

API_TOKEN = "8154427178:AAEJPcc0xXiRt43YgCNs_hKKqVmibGoyAAA"

# --- Data ---
CLASSES = [
    "–í–∞—Ä–≤–∞—Ä",
    "–ë–∞—Ä–¥",
    "–ü–ª—É—Ç",
    "–î—Ä—É–∏–¥",
    "–ö–æ–ª–¥—É–Ω",
    "–ú–æ–Ω–∞—Ö",
    "–ü–∞–ª–∞–¥–∏–Ω",
    "–°–ª–µ–¥–æ–ø—ã—Ç"
    "–ñ—Ä–µ—Ü",
    "–ß–∞—Ä–æ–¥–µ–π",
    "–í–æ–∏–Ω",
    "–ö–æ–ª–¥—É–Ω"
]

RACES = ["–ß–µ–ª–æ–≤–µ–∫", "–≠–ª—å—Ñ", "–ü–æ–ª—É–æ—Ä–∫", "–ì–Ω–æ–º", "–î–≤–∞—Ä—Ñ", "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π", "–ü–æ–ª—É—ç–ª—å—Ñ", "–¢–∏—Ñ–ª–∏–Ω–≥"]
GENDERS = ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]

SUBRACES = {
    "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π": ["–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π", "–°–∏–Ω–∏–π –¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π"],
    "–î–≤–∞—Ä—Ñ": ["–ì–æ—Ä–Ω—ã–π –¥–≤–æ—Ä—Ñ", "–•–æ–ª–º–æ–≤–æ–π –¥–≤–æ—Ä—Ñ"],
    "–≠–ª—å—Ñ": ["–í—ã—Å—à–∏–π —ç–ª—å—Ñ", "–õ–µ—Å–Ω–æ–π —ç–ª—å—Ñ", "–¢—ë–º–Ω—ã–π —ç–ª—å—Ñ (–¥—Ä–æ—É)"],
    "–ì–Ω–æ–º": ["–ì–æ—Ä–Ω—ã–π –≥–Ω–æ–º", "–õ–µ—Å–Ω–æ–π –≥–Ω–æ–º"],
    "–ü–æ–ª—É—ç–ª—å—Ñ": ["–≠–ª—å—Ñ–∏–π—Å–∫–∏–π –ø–æ–ª—É—ç–ª—å—Ñ", "–ß–µ–ª–æ–≤–µ—á–∏–π –ø–æ–ª—É—ç–ª—å—Ñ"],
    "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫": ["–õ–æ–≤–∫–∏–π –ø–æ–ª—É—Ä–æ—Å–ª–∏–∫", "–°—Ç–æ–π–∫–∏–π –ø–æ–ª—É—Ä–æ—Å–ª–∏–∫"]
}

# --- FSM ---
class CharacterCreation(StatesGroup):
    CHOOSING_CLASS = State()
    CHOOSING_RACE = State()
    CHOOSING_SUBRACE = State()
    CHOOSING_GENDER = State()
    CHOOSING_CHARACTERISTICS = State()
    CHOOSING_SKILLS = State()
    CHOOSING_INVENTORY = State()
    CHOOSING_AGE = State()
    CHOOSING_STORY = State()
    CHOOSING_NAME = State()

# --- Bot Setup ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- Helpers ---
def get_keyboard(options: list, add_random=True, add_back=True):
    builder = InlineKeyboardBuilder()
    for opt in options:
        builder.button(text=opt, callback_data=opt)
    if add_random:
        builder.button(text="üé≤ –°–ª—É—á–∞–π–Ω–æ", callback_data="__random__")
    if add_back:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="__back__")
    builder.adjust(2)
    return builder.as_markup()

# --- Handlers ---
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(CLASSES, add_back=False))
    await state.set_state(CharacterCreation.CHOOSING_CLASS)

@dp.callback_query(CharacterCreation.CHOOSING_CLASS)
async def choose_class(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "__random__":
        selected = random.choice(CLASSES)
    elif callback.data == "__back__":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(CLASSES, add_back=False))
        return
    else:
        selected = callback.data

    await state.update_data(char_class=selected)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(RACES))
    await state.set_state(CharacterCreation.CHOOSING_RACE)

@dp.callback_query(CharacterCreation.CHOOSING_RACE)
async def choose_race(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "__random__":
        selected = random.choice(RACES)
    elif callback.data == "__back__":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(CLASSES))
        await state.set_state(CharacterCreation.CHOOSING_CLASS)
        return
    else:
        selected = callback.data

    await state.update_data(char_race=selected)

    if selected in SUBRACES:
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞—Å—É –¥–ª—è {selected}:", reply_markup=get_keyboard(SUBRACES[selected]))
        await state.set_state(CharacterCreation.CHOOSING_SUBRACE)
    else:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–¥–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(GENDERS))
        await state.set_state(CharacterCreation.CHOOSING_GENDER)

@dp.callback_query(CharacterCreation.CHOOSING_SUBRACE)
async def choose_subrace(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_data = await state.get_data()
    race = user_data.get("char_race")

    if callback.data == "__random__":
        selected = random.choice(SUBRACES[race])
    elif callback.data == "__back__":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(RACES))
        await state.set_state(CharacterCreation.CHOOSING_RACE)
        return
    else:
        selected = callback.data

    await state.update_data(char_subrace=selected)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–¥–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(GENDERS))
    await state.set_state(CharacterCreation.CHOOSING_GENDER)

@dp.callback_query(CharacterCreation.CHOOSING_GENDER)
async def choose_gender(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "__random__":
        selected = random.choice(GENDERS)
    elif callback.data == "__back__":
        user_data = await state.get_data()
        race = user_data.get("chosen_race")
        if race in SUBRACES:
            await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞—Å—É –¥–ª—è {race}:", reply_markup=get_keyboard(SUBRACES[race]))
            await state.set_state(CharacterCreation.CHOOSING_SUBRACE)
        else:
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(RACES))
            await state.set_state(CharacterCreation.CHOOSING_RACE)
        return
    else:
        selected = callback.data

    await state.update_data(char_gender=selected)
    data = await state.get_data()
    async with aiohttp.ClientSession() as session:
        params = data
        async with session.get("http://localhost:8000/character-list-options", params=params) as resp:
            if resp.status == 200:
                json_data = await resp.json()
                print(json_data)
                await callback.message.edit_text(f"–°–≤–æ–¥–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n{json_data['options']}")
            else:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞.")

# --- Main ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
