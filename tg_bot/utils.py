import re

# Utility functions
def get_key_by_value(dictionary, value):
    """Finds the key for a given value in a dictionary."""
    return next((key for key, val in dictionary.items() if val == value), None)

def send_long_message(update, text):
    """Sends a long message by splitting it into parts."""
    max_message_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    for i in range(0, len(text), max_message_length):
        update.message.reply_text(text[i:i+max_message_length], parse_mode='MarkdownV2')

def escape_markdown_v2(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
    return re.sub(r'([._()[\]~`>#+-=|{}.!])', r'\\\1', text)

def translate_key(key):
    """Translates a key using the TRANSLATIONS dictionary."""
    TRANSLATIONS = {
    "type": "–¢–∏–ø",
    "damage": "–£—Ä–æ–Ω",
    "damage_type": "–¢–∏–ø —É—Ä–æ–Ω–∞",
    "properties": "–°–≤–æ–π—Å—Ç–≤–∞",
    "weight": "–í–µ—Å",
    "cost": "–¶–µ–Ω–∞",
    "ac_base": "–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ (AC)",
    "dex_bonus": "–ë–æ–Ω—É—Å –õ–æ–≤–∫–æ—Å—Ç–∏",
    "max_dex_bonus": "–ú–∞–∫—Å. –±–æ–Ω—É—Å –õ–æ–≤–∫–æ—Å—Ç–∏",
    "stealth_disadvantage": "–ü–æ–º–µ—Ö–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏",
    "weapons": "–û—Ä—É–∂–∏–µ",
    "armor": "–ë—Ä–æ–Ω—è",
    "name": "–ò–º—è",
    "surname": "–§–∞–º–∏–ª–∏—è",
    "race": "–†–∞—Å–∞",
    "character_class": "–ö–ª–∞—Å—Å",
    "lvl": "–£—Ä–æ–≤–µ–Ω—å",
    "hp": "–•–∏—Ç—ã",
    "speed": "–°–∫–æ—Ä–æ—Å—Ç—å",
    "worldview": "–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ",
    "initiative": "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞",
    "inspiration": "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
    "stats": "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
    "stat_modifiers": "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
    "skills": "–ù–∞–≤—ã–∫–∏",
    "traits_and_abilities": "–ß–µ—Ä—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    "inventory": "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
    "languages": "–Ø–∑—ã–∫–∏",
    "backstory": "–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è"
    }

    return TRANSLATIONS.get(key, key)

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def translate_stat(stat):
    """Translates stat keys into Russian."""
    stat_translations = {
        'strength': '–°–∏–ª–∞',
        'dexterity': '–õ–æ–≤–∫–æ—Å—Ç—å',
        'constitution': '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
        'intelligence': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        'wisdom': '–ú—É–¥—Ä–æ—Å—Ç—å',
        'charisma': '–•–∞—Ä–∏–∑–º–∞'
    }
    return stat_translations.get(stat, stat.capitalize())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ format_weapons_and_armor –¥–ª—è –æ—Ä—É–∂–∏—è –∏ –±—Ä–æ–Ω–∏
def format_weapons_and_armor(data):
    """Formats weapons and armor data into a readable text response with translation."""
    card = ""

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    if "weapons_and_equipment" in data:
        weapons_and_equipment = data["weapons_and_equipment"]
        card += f"*üõ°Ô∏è –ê–º—É–Ω–∏—Ü–∏—è:*\n"
        for name, details in weapons_and_equipment.items():
            card += f"  - *{name}:*\n"
            for key, value in details.items():
                if isinstance(value, list):
                    value = ", ".join(value)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                card += f"    - {translate_key(key)}: {value}\n"
            card += "\n"
    else:
        card += "*üõ°Ô∏è –ê–º—É–Ω–∏—Ü–∏—è: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
    if "armor" in data:
        armor = data["armor"]
        card += ""
        for name, details in armor.items():
            card += f"  - *{name}:*\n"
            for key, value in details.items():
                if key == "dex_bonus":
                    value = "–î–∞" if value else "–ù–µ—Ç"
                elif key == "stealth_disadvantage":
                    value = "–î–∞" if value else "–ù–µ—Ç"
                if isinstance(value, list):
                    value = ", ".join(value)
                card += f"    - {translate_key(key)}: {value}\n"
            card += "\n"
    else:
        card += ""

    return card

def format_character_card(data):
    """Formats character data into a readable text response."""
    card = (
        f"*–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*\n"
        f"üë§ *–ò–º—è:* {data.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π')} {data.get('surname', '')}\n"
        f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üåç *–†–∞—Å–∞:* {data.get('subrace') if data.get('subrace') != '' else data.get('race', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"‚öîÔ∏è *–ö–ª–∞—Å—Å:* {data.get('character_class', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üåü *–£—Ä–æ–≤–µ–Ω—å:* {data.get('lvl', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üíì *–•–∏—Ç—ã:* {data.get('hp', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
        f"üëÅÔ∏è *–ü–∞—Å—Å–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ:* {data.get('passive_perception', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üèÉ *–°–∫–æ—Ä–æ—Å—Ç—å:* {data.get('speed', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ñ—É—Ç–æ–≤\n"
        f"‚öñÔ∏è *–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:* {data.get('worldview', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üé≤ *–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:* {data.get('initiative', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üí° *–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ:* {'–î–∞' if data.get('inspiration', False) else '–ù–µ—Ç'}\n"
        f"*üìú –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:*\n{data.get('backstory', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
    )

    if 'stats' in data:
        stats = data['stats']
        card += "*‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
        card += "\n".join(f"  - {translate_stat(stat)}: {value}" for stat, value in stats.items())  # –ü–µ—Ä–µ–≤–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

    if 'stat_modifiers' in data:
        modifiers = data['stat_modifiers']
        card += "\n\n*üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:*\n"
        card += "\n".join(f"  - {translate_stat(stat)}: {value}" for stat, value in modifiers.items())

    if 'skills' in data:
        skills = data['skills']
        card += "\n\n*üõ†Ô∏è –ù–∞–≤—ã–∫–∏:*\n"
        card += ", ".join(skills)

    if 'traits_and_abilities' in data:
        traits = data['traits_and_abilities']
        card += "\n\n*üß¨ –ß–µ—Ä—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:*\n"
        card += "\n".join(f"  - *{trait}:* {desc}" for trait, desc in traits.items())

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º
    card += f'\n\n {format_weapons_and_armor(data)}'

    # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    if 'inventory' in data:
        inventory = data['inventory']
        card += "\n\n*üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n"
        card += ", ".join(inventory)

    if 'languages' in data:
        languages = data['languages']
        card += "\n\n*üó£Ô∏è –Ø–∑—ã–∫–∏:*\n"
        card += ", ".join(languages)
        
    return card